server:
  port: ${PORT:8081}
spring:
  application:
    # the name of the application represents the global identifier of this microservice.
    name: business-process-service
    url: ${BUSINESS_PROCESS_SERVICE_URL}
  cloud:
    config:
      uri: ${CONFIG_SERVER_URI:http://localhost:8888}
      # failFast is disabled per default, so that the service can start standalone without config server.
      # failFast should be enabled in production environments.
      # it can be set via an environment variable or the config server
      failFast: ${CONFIG_SERVER_FAILFAST:false}
    discovery:
      # by disabling the service discovery the application/service can be started in "standalone mode".
      # service discovery is disabled by default and should be enabled (set to true) for the "cloud mode".
      # it can be set via an environment variable or the config server
      enabled: ${discovery.enabled:${DISCOVERY_ENABLED:false}}
  datasource:
    camunda:
      url: jdbc:postgresql://${CAMUNDA_DB_HOST:localhost}:${CAMUNDA_DB_PORT:5432}/${CAMUNDA_DB_NAME:camunda}?currentSchema=public&ApplicationName=business-process-service-camundadb${APPLICATION_NAME_SUFFIX:}
      username: ${CAMUNDA_DB_USERNAME:postgres}
      password: ${CAMUNDA_DB_PASSWORD:nimble}
      driver-class: org.postgresql.Driver
    bpdb:
      url: jdbc:postgresql://${BUSINESS_PROCESS_DB_HOST:localhost}:${BUSINESS_PROCESS_DB_PORT:5432}/${BUSINESS_PROCESS_DB_NAME:businessprocessengine}?currentSchema=public&ApplicationName=business-process-service-businessprocessenginedb${APPLICATION_NAME_SUFFIX:}
      username: ${BUSINESS_PROCESS_DB_USERNAME:postgres}
      password: ${BUSINESS_PROCESS_DB_PASSWORD:nimble}
      driver-class: org.postgresql.Driver
    ubldb:
      url: jdbc:postgresql://${UBL_DB_HOST:localhost}:${UBL_DB_HOST_PORT:5432}/${UBL_DB_NAME:ubldb}?currentSchema=public&ApplicationName=business-process-service-ubldb${APPLICATION_NAME_SUFFIX:}
      username: ${UBL_DB_USERNAME:postgres}
      password: ${UBL_DB_PASSWORD:nimble}
      driver-class: org.postgresql.Driver
    binarycontentdb:
      url: jdbc:postgresql://${BINARY_CONTENT_DB_HOST:localhost}:${BINARY_CONTENT_DB_PORT:5432}/${BINARY_CONTENT_DB_NAME:binarycontentdb}?currentSchema=public&ApplicationName=business-process-service-binarycontentdb${APPLICATION_NAME_SUFFIX:}
      username: ${BINARY_CONTENT_DB_USERNAME:postgres}
      password: ${BINARY_CONTENT_DB_PASSWORD:nimble}
      driver-class: org.postgresql.Driver
    test-on-borrow: true
    test-while-idle: true
    remove-abandoned: false #making this false since some of the queries take too much time and abandoning connections causes an error in such cases
    log-abandoned: true
    initial-size: 3
    max-active: 55
    max-idle: 3
    min-idle: 3
    max-wait: 90000
    time-between-eviction-runs-millis: 30000
    min-evictable-idle-time-millis: 60000
    validation-query: "SELECT 1;" # Validation query must be set in order to test connections
  messages:
    encoding: ISO-8859-1
  cache:
    jcache:
      config: classpath:ehcache.xml
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS}
    consumer:
      group-id: business-process-service${KAFKA_CONSUMER_GROUP_ID_SUFFIX:}
    properties:
      sasl:
        jaas:
          config: ${KAFKA_JAAS_CONFIG}
  mail:
    debug: false  # disable printing email to log output
    host: ${SMTP_HOST:localhost}
    port: ${SMTP_PORT:25}
    defaultFrom: ${SMTP_DEFAULT_FROM:}
    username: ${SMTP_USERNAME:}
    password: ${SMTP_PASSWORD:}
    smtp.auth: ${SMTP_AUTH:true}
    properties.mail.smtp.starttls.enable: ${SMTP_STARTTLS:true}
    platformName : ${MAIL_PLATFORM_NAME:NIMBLE}
    languages: ${MAIL_TEMPLATE_LANGUAGES:en,es}
  jackson:
    date-format: com.fasterxml.jackson.databind.util.ISO8601DateFormat
    serialization:
      WRITE_DATES_AS_TIMESTAMPS: false

springfox:
  documentation:
    swagger:
      v2:
        path: /api-docs

#### c3p0 database connection pool configurations
com:
  mchange:
    v2:
      c3p0:
        impl:
          DefaultConnectionTester:
            querylessTestRunner: SWITCH
      log:
        MLog: slf4j

persistence:
  orm:
    business_process:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        show_sql: false
        hbm2ddl:
          auto: update
        cache:
          provider_class: org.hibernate.cache.HashtableCacheProvider
        jdbc:
          batch_size: 10
        use_sql_comments: true
        transaction:
          factory_class: org.hibernate.transaction.JDBCTransactionFactory
        current_session_context_class: thread
        event:
          merge:
            entity_copy_observer: allow
    ubl:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        show_sql: false
        hbm2ddl:
          auto:
        cache:
          provider_class: org.hibernate.cache.HashtableCacheProvider
        jdbc:
          batch_size: 10
        use_sql_comments: true
        transaction:
          factory_class: org.hibernate.transaction.JDBCTransactionFactory
        current_session_context_class: thread
        event:
          merge:
            entity_copy_observer: allow
    modaml:
      hibernate:
        connection:
          url: jdbc:h2:file://${user.home}/nimble/modaml;AUTO_SERVER=TRUE;MVCC=TRUE;AUTO_RECONNECT=TRUE;DB_CLOSE_DELAY=10;INIT=create schema IF NOT EXISTS APPS
          username: sa
          password:
          driver_class: org.h2.Driver
        dialect: org.hibernate.dialect.H2Dialect
        show_sql: false
        hbm2ddl:
          auto: update
        cache:
          provider_class: org.hibernate.cache.HashtableCacheProvider
        jdbc:
          batch_size: 0
        c3p0:
          acquire_increment: 2
          initialPoolSize: 2
          max_size: 10
          min_size: 2
          maxStatementsPerConnection: 2
          acquireRetryAttempts: 10
          acquireRetryDelay: 100
          numHelperThreads: 10
          idle_test_period: 600
        use_sql_comments: true
        transaction:
          factory_class: org.hibernate.transaction.JDBCTransactionFactory
        current_session_context_class: thread
        event:
          merge:
            entity_copy_observer: allow

logstash:
  uri: ${LOGSTASH_URI:localhost:5000}

camunda:
  bpm:
    webapp:
      index-redirect-enabled: false
    database:
      schema-update: true
      type: postgres
    admin-user:
      id: kermit
      password: superSecret

efactory:
  service-registry:
    accountancy-service:
      url: ${EFACTORY_SERVICE_REGISTRY_ACCOUNTANCY_SERVICE:}

nimble:
  binary-content:
      url: BusinessProcessBinaryContentUri
  cors_enabled: false
  identity:
    url: ${IDENTITY_SERVICE_URL}
  keycloak:
    public-key: ${KEYCLOAK_PUBLIC_KEY}
  data-channel:
    url: ${DATA_CHANNEL_SERVICE_URL}
  frontend:
    url: ${FRONTEND_URL}
  tracking-analysis:
    url: ${TRACKING_ANALYSIS_SERVICE_URL:http://nimble-dev.ikap.biba.uni-bremen.de/tracking-analysis}
  delegate-service:
    url: ${DELEGATE_SERVICE_URL:}
  federation-instance-id: ${FEDERATION_INSTANCE_ID}
  # TODO: Retrieve the default token from Keycloak for business-process service client
  default-token: ${BUSINESS_PROCESS_SERVICE_DEFAULT_TOKEN:}
  oauth:
    # Describes the settings for EFPF Keycloak
    # It is used to retrieve an access token for Accountancy Service calls
    eFactoryClient:
      clientId: ${OAUTH_ACCOUNTANCY_SERVICE_REGISTRY_CLIENT_ID:}
      clientSecret: ${OAUTH_ACCOUNTANCY_SERVICE_REGISTRY_CLIENT_SECRET:}
      accessTokenUri: ${OAUTH_ACCOUNTANCY_SERVICE_CLIENT_ACCESSTOKEN_URI:}
  kafka:
      topics:
        businessProcessUpdates: ${KAFKA_TOPIC_BUSINESS_PROCESS_UPDATES}
  check-entity-ids: ${CHECK_ENTITY_IDS:false}
  stripe:
    # Application fee is calculated using the following environment variables.
    # It is equal to STRIPE_APPLICATION_FEE_PERCENTAGE% + STRIPE_APPLICATION_FEE_CONSTANT per successful charge.
    # Note that Stripe application fee is 2.9% + 30Â¢ per successful charge, therefore, STRIPE_APPLICATION_FEE_PERCENTAGE
    # should be greater than 2.9%.
    applicationFeePercentage: ${STRIPE_APPLICATION_FEE_PERCENTAGE:5.9}
    applicationFeeConstant: ${STRIPE_APPLICATION_FEE_CONSTANT:25} # in cents
    secretKey: ${STRIPE_SECRET_KEY:}
hystrix:
  command:
    default:
      execution:
        isolation:
          thread:
            timeoutInMilliseconds: 300000
  threadpool:
    default:
      coreSize: 300
      maxQueueSize: -1

build:
  version: 5.0.0-Staging

################################################################################################
################################## KUBERNETES CONFIG ###########################################
################################################################################################

---

spring:
  profiles: kubernetes

nimble:
  cors_enabled: false
  db-credentials-json: ${DB_CREDENTIALS_JSON}

persistence:
  orm:
    business_process:
      hibernate:
        connection:
          url: # set in eu.nimble.service.bp.config.BusinessProcessPersistenceConfig class
          username: # set in eu.nimble.service.bp.config.BusinessProcessPersistenceConfig class
          password: # set in eu.nimble.service.bp.config.BusinessProcessPersistenceConfig class
          driver_class: org.postgresql.Driver
        dialect: org.hibernate.dialect.PostgreSQLDialect
        show_sql: false
        hbm2ddl:
          auto: update
        cache:
          provider_class: org.hibernate.cache.HashtableCacheProvider
        jdbc:
          batch_size: 10
        c3p0:
          acquire_increment: 3
          initialPoolSize: 3
          max_size: 6
          min_size: 3
          maxStatementsPerConnection: 5
          acquireRetryAttempts: 10
          acquireRetryDelay: 100
          numHelperThreads: 10
          idle_test_period: 600
        use_sql_comments: true
        transaction:
          factory_class: org.hibernate.transaction.JDBCTransactionFactory
        current_session_context_class: thread
        event:
          merge:
            entity_copy_observer: allow
      bluemix:
        credentials_json: ${BLUEMIX_BUSINESS_PROCESS_DB_JSON:}
    ubl:
      hibernate:
        connection:
          driver_class: org.postgresql.Driver
        dialect: org.hibernate.dialect.PostgreSQLDialect
        show_sql: false
        hbm2ddl:
          auto: update
        cache:
          provider_class: org.hibernate.cache.HashtableCacheProvider
        jdbc:
          batch_size: 10
        c3p0:
          acquire_increment: 3
          initialPoolSize: 3
          max_size: 6
          min_size: 3
          maxStatementsPerConnection: 5
          acquireRetryAttempts: 10
          acquireRetryDelay: 100
          numHelperThreads: 10
          idle_test_period: 600
        use_sql_comments: true
        transaction:
          factory_class: org.hibernate.transaction.JDBCTransactionFactory
        current_session_context_class: thread
        event:
          merge:
            entity_copy_observer: allow
      bluemix:
        credentials_json: ${BLUEMIX_UBL_DB_JSON:}
    modaml:
      hibernate:
        connection:
          driver_class: org.postgresql.Driver
        dialect: org.hibernate.dialect.PostgreSQLDialect
        show_sql: false
        hbm2ddl:
          auto: update
        cache:
          provider_class: org.hibernate.cache.HashtableCacheProvider
        jdbc:
          batch_size: 0
        c3p0:
          acquire_increment: 2
          initialPoolSize: 2
          max_size: 10
          min_size: 2
          maxStatementsPerConnection: 2
          acquireRetryAttempts: 10
          acquireRetryDelay: 100
          numHelperThreads: 10
          idle_test_period: 600
        use_sql_comments: true
        transaction:
          factory_class: org.hibernate.transaction.JDBCTransactionFactory
        current_session_context_class: thread
        event:
          merge:
            entity_copy_observer: allow
      bluemix:
        credentials_json: ${BLUEMIX_MODAML_DB_JSON:}


################################################################################################
################################### TEST CONFIG ###########################################
################################################################################################

---

spring:
  application:
    url: http://localhost:8081
  profiles: test
  # Local h2 database
  datasource:
    camunda:
      url: jdbc:h2:mem:db;MVCC=TRUE;AUTO_RECONNECT=TRUE;DB_CLOSE_ON_EXIT=FALSE;INIT=create schema IF NOT EXISTS APPS
      username: sa
      password:
      driver-class: org.h2.Driver
    bpdb:
      url: jdbc:h2:mem:db2;MVCC=TRUE;AUTO_RECONNECT=TRUE;DB_CLOSE_ON_EXIT=FALSE;INIT=create schema IF NOT EXISTS APPS
      username: sa
      password:
      driver-class: org.h2.Driver
    ubldb:
      url: jdbc:h2:mem:db3;MVCC=TRUE;AUTO_RECONNECT=TRUE;DB_CLOSE_ON_EXIT=FALSE;INIT=create schema IF NOT EXISTS APPS
      username: sa
      password:
      driver-class: org.h2.Driver
    binarycontentdb:
      url: jdbc:h2:mem:db4;AUTO_RECONNECT=TRUE;DB_CLOSE_DELAY=-1;INIT=create schema IF NOT EXISTS APPS
      username: sa
      password:
      driver-class: org.h2.Driver
  kafka:
      bootstrap-servers:
      consumer:
        group-id:
      properties:
        sasl:
          jaas:
            config:
  h2:
    console:
      enabled: true
persistence:
  orm:
    ubl:
      hibernate:
        dialect: org.hibernate.dialect.H2Dialect
        hbm2ddl:
          auto: update
    business_process:
      hibernate:
        dialect: org.hibernate.dialect.H2Dialect
        hbm2ddl:
          auto: update
camunda:
  bpm:
    webapp:
      index-redirect-enabled: false
    database:
      schema-update: true
      type: postgres
    admin-user:
      id: kermit
      password: superSecret

nimble:
  cors_enabled: true
  identity:
    url:
  data-channel:
    url:
  frontend:
    url:
  delegate-service:
    url:
  federation-instance-id: TEST_INSTANCE
build:
  version: 5.0.0-Staging
